syntax = "proto3";

package Schema;

enum GenerationMode {
    AutoAccrue = 0;
    Word = 1;
}

message GameSettings {
    GenerationMode generation_mode = 1;
    string map = 2;
}

message SearchForGame
{
    bool ranked = 1;
}

message GameFoundForPlayer
{
    string game_id = 1;
    string player_id = 2;
    string address = 3;
}

message PlacePlayerInGame
{
    string player_id = 1;
}

message Registered
{
    string port = 1;
}

message Register
{
    string port = 1;
}


message Oneof_PlayerToMatchmaker {
    oneof msg {
        SearchForGame search_for_game = 1;
    }
}

message Oneof_MatchMakerToPlayer {
    oneof msg {
        GameFoundForPlayer found_game = 1;
    }
}

message Oneof_HostServerToMatchmaker {
    oneof msg {
        GameFoundForPlayer game_found_for_player = 1;
    }
}

message Oneof_MatchmakerToHostServer {
    oneof msg {
        PlacePlayerInGame place_player_in_game = 1;
        Registered registered = 2;
    }
}

message Oneof_HostServerToGameServer {
    oneof msg {
        Register register = 1;
    }
}

// #####################
// ###### In game ######
// #####################


message OneofUpdate {
    string recipient_id = 1;
    oneof update {
        InitialState initial_state = 2;
        AllSoldierPositions all_soldier_positions = 3;
    }
}

message Chunk {
    int32 index = 1;
    int32 maxIndex = 2;
    bytes data = 3;
}

enum PacketType {
    UPDATE = 0;
    HEARTBEAT = 1;
}

message Packet {
    repeated Chunk chunks = 1;
    uint64 id = 2;
    PacketType type = 3;
    int32 sent_ms = 4;
}

enum TileType
{
    Invalid = 0;
    Land = 1;
    Water = 2;
    Tree = 3;
}


message V2 {
    float x = 1;
    float y = 2;
}

message V2Int {
    int32 x = 1;
    int32 y = 2;
}

message AllSoldierPositions {
    repeated SoldierPosition soldier_positions = 1;
}

message SoldierPosition {
    uint64 id = 1;
    V2 pos = 2;
    V2 velocity = 3;
}

message KeepState {
    uint64 id = 1;
    V2 pos = 2;
    int32 warrior_count = 3;
    int32 archer_count = 4;
    string name = 5;
    int32 alliance = 6;
}

message InitialState {
    repeated KeepState keeps = 1;
    int32 map_width = 2;
    int32 map_height = 3;
    repeated TileType tiles = 4;
}